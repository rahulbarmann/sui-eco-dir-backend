generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id           String    @id @default(cuid())
  name         String    @unique
  description  String
  icon         String
  projectCount Int       @default(0)
  featured     Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  projects     ProjectCategory[]

  @@map("categories")
}

model Project {
  id               String         @id @default(cuid())
  name             String         @unique
  tagline          String         @default("")
  description      String         @default("")
  logo             String?
  heroImage        String?
  website          String?
  videoUrl         String?
  featured         Boolean        @default(false)
  status           ProjectStatus  @default(UNPUBLISHED)
  
  // New boolean fields
  isHiring         Boolean        @default(false)
  careerPageUrl    String?
  isOpenForBounty  Boolean        @default(false)
  bountySubmissionUrl String?
  isOpenSource     Boolean        @default(false)
  githubUrl        String?
  
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  images           ProjectImage[]
  videos           ProjectVideo[]
  categories       ProjectCategory[]
  socialLinks      SocialLinks?

  @@map("projects")
}

model ProjectCategory {
  id         String   @id @default(cuid())
  projectId  String
  categoryId String
  createdAt  DateTime @default(now())
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([projectId, categoryId])
  @@map("project_categories")
}

model ProjectVideo {
  id          String   @id @default(cuid())
  projectId   String
  title       String
  description String?
  playbackId  String   @unique
  thumbnail   String
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_videos")
}



model SocialLinks {
  id        String   @id @default(cuid())
  projectId String   @unique
  website   String?
  github    String?
  twitter   String?
  discord   String?
  telegram  String?
  medium    String?
  youtube   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("social_links")
}

model ProjectImage {
  id        String   @id @default(cuid())
  projectId String
  url       String
  alt       String?
  order     Int      @default(0)
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_images")
}

enum ProjectStatus {
  PUBLISHED
  UNPUBLISHED
}